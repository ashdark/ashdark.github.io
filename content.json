{"meta":{"title":"ijuniorfu","subtitle":null,"description":"now is good!","author":"ijuniorfu","url":"http://ijuniorfu.github.io"},"pages":[{"title":"categories","date":"2017-04-20T09:19:34.000Z","updated":"2017-08-26T03:47:32.000Z","comments":true,"path":"categories/index.html","permalink":"http://ijuniorfu.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-04-20T09:17:45.000Z","updated":"2017-08-26T03:47:32.000Z","comments":true,"path":"tags/index.html","permalink":"http://ijuniorfu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"认识docker-compose（一）配置文件详解","slug":"认识docker-compose（一）配置文件详解","date":"2017-08-26T09:16:48.000Z","updated":"2017-08-26T10:34:57.000Z","comments":true,"path":"2017/08/26/认识docker-compose（一）配置文件详解/","link":"","permalink":"http://ijuniorfu.github.io/2017/08/26/认识docker-compose（一）配置文件详解/","excerpt":"","text":"docker-compose.yml 配置文件（约定的 docker-compose 配置文件的名字）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253version: &quot;2.0&quot;services: web: image: ubuntu:16.04 ports: - &quot;80:80&quot; - &quot;443:443&quot; - &quot;9000:9000&quot; links: - mysql:mysql - mongo:mongo - memcached:memcached - redis:redis - elasticsearch:elasticsearch - rabbitmq:rabbitmq volumes: - ./www:/var/www - ./sites:/etc/nginx/conf.d - ./logs:/var/log/supervisor mysql: image: mysql ports: - &quot;3306:3306&quot; environment: MYSQL_ROOT_PASSWORD: password mongo: image: mongo ports: - &quot;27017:27017&quot; memcached: image: memcached ports: - &quot;11211:11211&quot; redis: image: redis ports: - &quot;6379:6379&quot; elasticsearch: image: elasticsearch ports: - &quot;9200:9200&quot; - &quot;9300:9300&quot; rabbitmq: image: rabbitmq:3.6.1-management ports: - &quot;15672:15672&quot; - &quot;5672:5672&quot; 一份标准配置文件应该包含 version、services、networks 三大部分，其中最关键的就是 services 和 networks 两个部分，下面先来看 services 的书写规则。 version这里是的version是配置文件的版本号，每个版本的配置文件格式有所不同 services编排各个服务 image在 services 标签下的第二级标签是 web，这个名字是用户自己自定义，它就是服务名称。image 则是指定服务的镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。 build服务除了可以基于指定的镜像，还可以基于一份 Dockerfile，在使用 up 启动之时执行构建任务，这个构建标签就是 build，它可以指定 Dockerfile 所在文件夹的路径。Compose 将会利用它自动构建这个镜像，然后使用这个镜像启动服务容器。 build: /path/to/build/dir 也可以是相对路径，只要上下文确定就可以读取到 Dockerfile。 build: ./dir 设定上下文根目录，然后以该目录为准指定 Dockerfile。 123build: context: ../ dockerfile: path/of/Dockerfile 注意 build 都是一个目录，如果你要指定 Dockerfile 文件需要在 build 标签的子级标签中使用 dockerfile 标签指定，如上面的例子。如果你同时指定了 image 和 build 两个标签，那么 Compose 会构建镜像并且把镜像命名为 image 后面的那个名字。 12build: ./dirimage: webapp:tag 既然可以在 docker-compose.yml 中定义构建任务，那么一定少不了 arg 这个标签，就像 Dockerfile 中的 ARG 指令，它可以在构建过程中指定环境变量，但是在构建成功后取消，在 docker-compose.yml 文件中也支持这样的写法： 12345build: context: . args: buildno: 1 password: secret 下面这种写法也是支持的，一般来说下面的写法更适合阅读。 12345build: context: . args: - buildno=1 - password=secret 与 ENV 不同的是，ARG 是允许空值的。例如： 123args: - buildno - password 这样构建过程可以向它们赋值。 注意：YAML 的布尔值（true, false, yes, no, on, off）必须要使用引号引起来（单引号、双引号均可），否则会当成字符串解析。 command使用 command 可以覆盖容器启动后默认执行的命令。 command: bundle exec thin -p 3000 也可以写成类似 Dockerfile 中的格式： command: [bundle, exec, thin, -p, 3000] container_name前面说过 Compose 的容器名称格式是：&lt;项目名称&gt;&lt;服务名称&gt;&lt;序号&gt;虽然可以自定义项目名称、服务名称，但是如果你想完全控制容器的命名，可以使用这个标签指定： container_name: app 这样容器的名字就指定为 app 了。 depends_on在使用 Compose 时，最大的好处就是少打启动命令，但是一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没启动数据库容器的时候启动了应用容器，这时候应用容器会因为找不到数据库而退出，为了避免这种情况我们需要加入一个标签，就是 depends_on，这个标签解决了容器的依赖、启动先后的问题。例如下面容器会先启动 redis 和 db 两个服务，最后才启动 web 服务： 1234567891011version: &apos;2&apos;services: web: build: . depends_on: - db - redis redis: image: redis db: image: postgres 注意的是，默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系。 dns和 –dns 参数一样用途，格式如下： dns: 8.8.8.8 也可以是一个列表：123dns: - 8.8.8.8 - 9.9.9.9 此外 dns_search 的配置也类似：1234dns_search: example.comdns_search: - dc1.example.com - dc2.example.com tmpfs挂载临时目录到容器内部，与 run 的参数一样效果：1234tmpfs: /runtmpfs: - /run - /tmp entrypoint在 Dockerfile 中有一个指令叫做 ENTRYPOINT 指令，用于指定接入点，第四章有对比过与 CMD 的区别。在 docker-compose.yml 中可以定义接入点，覆盖 Dockerfile 中的定义： entrypoint: /code/entrypoint.sh 格式和 Docker 类似，不过还可以写成这样： 1234567entrypoint: - php - -d - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so - -d - memory_limit=-1 - vendor/bin/phpunit env_filedocker-compose.yml 中可以定义一个专门存放变量的文件。如果通过 docker-compose -f FILE 指定了配置文件，则 env_file 中路径会使用配置文件路径。 如果有变量名称与 environment 指令冲突，则以后者为准。格式如下： env_file: .env 或者根据 docker-compose.yml 设置多个： 1234env_file: - ./common.env - ./apps/web.env - /opt/secrets.env 注意的是这里所说的环境变量是对宿主机的 Compose 而言的，如果在配置文件中有 build 操作，这些变量并不会进入构建过程中，如果要在构建中使用变量还是首选前面刚讲的 arg 标签。 environment与上面的 env_file 标签完全不同，反而和 arg 有几分类似，这个标签的作用是设置镜像变量，它可以保存变量到镜像里面，也就是说启动的容器也会包含这些变量设置，这是与 arg 最大的不同。一般 arg 标签的变量仅用在构建过程中。而 environment 和 Dockerfile 中的 ENV 指令一样会把变量一直保存在镜像、容器中，类似 docker run -e 的效果。 123456789environment: RACK_ENV: development SHOW: &apos;true&apos; SESSION_SECRET:environment: - RACK_ENV=development - SHOW=true - SESSION_SECRET expose这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上docker-compose.yml的端口映射还得ports这样的标签。123expose: - &quot;3000&quot; - &quot;8000&quot; external_links在使用Docker过程中，我们会有许多单独使用docker run启动的容器，为了使Compose能够连接这些不在docker-compose.yml中定义的容器，我们需要一个特殊的标签，就是external_links，它可以让Compose项目里面的容器连接到那些项目配置外部的容器（前提是外部容器中必须至少有一个容器是连接到与项目内的服务的同一个网络里面）。格式如下： 1234external_links: - redis_1 - project_db_1:mysql - project_db_1:postgresql extra_hosts添加主机名的标签，就是往/etc/hosts文件中添加一些记录，与Docker client的–add-host类似： 123extra_hosts: - &quot;somehost:162.242.195.82&quot; - &quot;otherhost:50.31.209.229&quot; 启动之后查看容器内部hosts： 12162.242.195.82 somehost50.31.209.229 otherhost labels向容器添加元数据，和Dockerfile的LABEL指令一个意思，格式如下： 12345678labels: com.example.description: &quot;Accounting webapp&quot; com.example.department: &quot;Finance&quot; com.example.label-with-empty-value: &quot;&quot; labels: - &quot;com.example.description=Accounting webapp&quot; - &quot;com.example.department=Finance&quot; - &quot;com.example.label-with-empty-value&quot; links还记得上面的depends_on吧，那个标签解决的是启动顺序问题，这个标签解决的是容器连接问题，与Docker client的–link一样效果，会连接到其它服务中的容器。格式如下： 1234links: - db - db:database - redis 使用的别名将会自动在服务容器中的/etc/hosts里创建。例如： 123172.12.2.186 db172.12.2.186 database172.12.2.187 redis 相应的环境变量也将被创建。 logging这个标签用于配置日志服务。格式如下： 1234logging: driver: syslog options: syslog-address: &quot;tcp://192.168.0.42:123&quot; 默认的driver是json-file。只有json-file和journald可以通过docker-compose logs显示日志，其他方式有其他日志查看方式，但目前Compose不支持。对于可选值可以使用options指定。 pidpid: &quot;host&quot; 将PID模式设置为主机PID模式，跟主机系统共享进程命名空间。容器使用这个标签将能够访问和操纵其他容器和宿主机的名称空间。 ports映射端口的标签。使用HOST:CONTAINER格式或者只是指定容器的端口，宿主机会随机映射端口。 12345ports: - &quot;3000&quot; - &quot;8000:8000&quot; - &quot;49100:22&quot; - &quot;127.0.0.1:8001:8001&quot; 注意：当使用HOST:CONTAINER格式来映射端口时，如果你使用的容器端口小于60你可能会得到错误得结果，因为YAML将会解析xx:yy这种数字格式为60进制。所以建议采用字符串格式。 security_opt为每个容器覆盖默认的标签。简单说来就是管理全部服务的标签。比如设置全部服务的user标签值为USER。 123security_opt: - label:user:USER - label:role:ROLE stop_signal设置另一个信号来停止容器。在默认情况下使用的是SIGTERM停止容器。设置另一个信号可以使用stop_signal标签。 stop_signal: SIGUSR1 volumes挂载一个目录或者一个已存在的数据卷容器，可以直接使用 [HOST:CONTAINER] 这样的格式，或者使用 [HOST:CONTAINER:ro] 这样的格式，后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统。Compose的数据卷指定路径可以是相对路径，使用 . 或者 .. 来指定相对目录。数据卷的格式可以是下面多种形式： 123456789101112131415volumes: // 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。 - /var/lib/mysql // 使用绝对路径挂载数据卷 - /opt/data:/var/lib/mysql // 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。 - ./cache:/tmp/cache // 使用用户的相对路径（~/ 表示的目录是 /home/&lt;用户目录&gt;/ 或者 /root/）。 - ~/configs:/etc/configs/:ro // 已经存在的命名的数据卷。 - datavolume:/var/lib/mysql 如果你不使用宿主机的路径，你可以指定一个volume_driver。 volumes_from从其它容器或者服务挂载数据卷，可选的参数是 :ro或者 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的。默认情况下是可读可写的。 12345volumes_from: - service_name - service_name:ro - container:container_name - container:container_name:rw cap_add, cap_drop添加或删除容器的内核功能。 123456cap_add: - ALLcap_drop: - NET_ADMIN - SYS_ADMIN cgroup_parent指定一个容器的父级cgroup。 cgroup_parent: m-executor-abcd devices设备映射列表。与Docker client的–device参数类似。 12devices: - &quot;/dev/ttyUSB0:/dev/ttyUSB0&quot; extends这个标签可以扩展另一个服务，扩展内容可以是来自在当前文件，也可以是来自其他文件，相同服务的情况下，后来者会有选择地覆盖原有配置。 123extends: file: common.yml service: webapp 用户可以在任何地方使用这个标签，只要标签内容包含file和service两个值就可以了。file的值可以是相对或者绝对路径，如果不指定file的值，那么Compose会读取当前YML文件的信息。 network_mode网络模式，与Docker client的–net参数类似，只是相对多了一个service:[service name] 的格式。例如： 12345network_mode: &quot;bridge&quot;network_mode: &quot;host&quot;network_mode: &quot;none&quot;network_mode: &quot;service:[service name]&quot;network_mode: &quot;container:[container name/id]&quot; 可以指定使用服务或者容器的网络。 networks加入指定网络，格式如下： 12345services: some-service: networks: - some-network - other-network 关于这个标签还有一个特别的子标签aliases，这是一个用来设置服务别名的标签，例如： 12345678910services: some-service: networks: some-network: aliases: - alias1 - alias3 other-network: aliases: - alias2 相同的服务可以在不同的网络有不同的别名。 其它还有这些标签：cpu_shares, cpu_quota, cpuset, domainname, hostname, ipc, mac_address, mem_limit, memswap_limit, privileged, read_only, restart, shm_size, stdin_open, tty, user, working_dir上面这些都是一个单值的标签，类似于使用docker run的效果。 12345678910111213141516171819202122cpu_shares: 73cpu_quota: 50000cpuset: 0,1user: postgresqlworking_dir: /codedomainname: foo.comhostname: fooipc: hostmac_address: 02:42:ac:11:65:43mem_limit: 1000000000memswap_limit: 2000000000privileged: truerestart: alwaysread_only: trueshm_size: 64Mstdin_open: truetty: true","categories":[{"name":"docker","slug":"docker","permalink":"http://ijuniorfu.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ijuniorfu.github.io/tags/docker/"},{"name":"docker-compose","slug":"docker-compose","permalink":"http://ijuniorfu.github.io/tags/docker-compose/"}]},{"title":"程序员优雅的使用windows10","slug":"程序员优雅的使用windows10","date":"2017-05-10T05:19:50.000Z","updated":"2017-08-26T03:47:32.000Z","comments":true,"path":"2017/05/10/程序员优雅的使用windows10/","link":"","permalink":"http://ijuniorfu.github.io/2017/05/10/程序员优雅的使用windows10/","excerpt":"","text":"工欲善其事必先利其器 个人认为MAC对程序开发是比较友好的，跟linux的环境也差不多，开发起来非常舒畅但是在公司的情况，有时候提供给我们的是Windows以下列出的就是我寄几在Windows上的工具用以记录和分享 Cmder 官网 windows必备神器支持PowerShell告别自带cmd,拥抱Cmder可以当做是Windows下的终端 Wox 官网 Windows下一款最接近 Alfred 的软件启动/文件搜索利器拥有许多插件，可以自由组合 Docker 官网 一个开源的应用容器引擎让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上也可以实现虚拟化在本地配置linux开发环境,统一同事之间的开发环境，新同事入职只需将开发环境容器进行拷贝","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"http://ijuniorfu.github.io/tags/windows/"}]},{"title":"docker常用命令","slug":"docker常用命令","date":"2017-04-30T09:05:52.000Z","updated":"2017-08-26T03:47:32.000Z","comments":true,"path":"2017/04/30/docker常用命令/","link":"","permalink":"http://ijuniorfu.github.io/2017/04/30/docker常用命令/","excerpt":"","text":"pull docker 镜像1# docker pull centos:6.6 查看docker 镜像123456# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEjun/lnmp latest bbb646441ce0 3 minutes ago 1.02 GBcentos 7 a8493f5f50ff 2 weeks ago 192 MBd4w/nsenter latest 9e4f13a0901e 7 months ago 83.8 kBcentos 6.6 d03626170061 7 months ago 203 MB 在docker index中搜索image（search）# docker search seanlo 运行centos镜像 bash1# docker run -it &lt;IMAGE ID&gt; /bin/bash 查看正在运行的docker 容器1# docker ps 查看所有docker 容器1# docker ps -a 删除容器1# docker rm &lt;CONTAINER ID&gt; 删除所有容器1# docker rm $(docker ps -q -a) 停止、启动、杀死一个容器123# docker stop &lt;容器名orID&gt;# docker start &lt;容器名orID&gt;# docker kill &lt;容器名orID&gt; 删除镜像1# docker rmi &lt;IMAGE ID&gt; 删除所有镜像1# docker rmi $(docker images -q) 把一个容器提交为镜像1# docker commit &lt;container-id&gt; &lt;image-name&gt; 导出 （export） Export命令用于持久化容器（不是镜像） 1# sudo docker export &lt;CONTAINER ID&gt; &gt; /home/export.tar 保存 （save） Save命令用于持久化镜像（不是容器） 1# docker save &lt;IMAGE ID&gt; &gt; /home/save.tar 导入 （import） 从容器快照文件中再导入为镜像 1# cat export.tar | docker import - jun/lnmp:1.0 加载镜像 （load） 加载保存的镜像 1# docker load &lt; /home/save.tar 运行一个新容器，同时为它命名、端口映射、文件夹映射。以redmine镜像为例1# docker run --name redmine -p 9003:80 -p 9023:22 -d -v /var/redmine/files:/redmine/files -v /var/redmine/mysql:/var/lib/mysql sameersbn/redmine 一个容器连接到另一个容器1# docker run -i -t --name sonar -d -link mmysql:db tpires/sonar-server sonar 连接到正在运行中的container（attach） 要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上–sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。 # docker attach --sig-proxy=false $CONTAINER_ID 使用docker attach进入Docker容器# docker attach &lt;CONTAINER ID&gt; 使用docker exec进入Docker容器# docker exec -it &lt;CONTAINER ID&gt; /bin/bash","categories":[{"name":"docker","slug":"docker","permalink":"http://ijuniorfu.github.io/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ijuniorfu.github.io/tags/docker/"}]},{"title":"使用heroku搭建shadowsocks","slug":"使用heroku搭建shadowsocks","date":"2017-04-20T11:51:22.000Z","updated":"2017-08-26T03:47:32.000Z","comments":true,"path":"2017/04/20/使用heroku搭建shadowsocks/","link":"","permalink":"http://ijuniorfu.github.io/2017/04/20/使用heroku搭建shadowsocks/","excerpt":"","text":"使用heroku搭建shadowsocks注册heroku.comheroku官网注册: www.heroku.com 下载安装Heroku CLI 登录heroku12345$ heroku loginEnter your Heroku credentials.Email: example@example.comPassword:... 更多: 开始heroku 创建heroku应用1$ heroku create app-name 下载Shadowsocks的Heroku专版，准备应用程序1234$ git clone https://github.com/mrluanma/shadowsocks-heroku.git$ cd shadowsocks-heroku$ git init$ git commit -m \"init\" 添加remote1$ heroku git:remote -a app-name 推送到heroku1$ heroku push heroku master 设置加密方法和密码，如：heroku config:set METHOD=rc4 KEY=PASSWORD加密方法推荐rc4和aes-256-cfb1$ heroku config:set METHOD=加密方法 KEY=密码 运行，如：node local.js -s appname.herokuapp.com -l 1080 -m rc4 -k PASSWORD -r 801$ node local.js -s 应用名称.herokuapp.com -l 本地端口 -m 加密方法 -k 密码 -r 80 修改代理设置 SOCKS5 127.0.0.1:1080 详细介绍","categories":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://ijuniorfu.github.io/categories/shadowsocks/"}],"tags":[{"name":"heroku","slug":"heroku","permalink":"http://ijuniorfu.github.io/tags/heroku/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://ijuniorfu.github.io/tags/shadowsocks/"}]}]}